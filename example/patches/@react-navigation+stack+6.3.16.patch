diff --git a/node_modules/@react-navigation/stack/src/types.tsx b/node_modules/@react-navigation/stack/src/types.tsx
index 77f48cd..593a3d3 100644
--- a/node_modules/@react-navigation/stack/src/types.tsx
+++ b/node_modules/@react-navigation/stack/src/types.tsx
@@ -176,6 +176,7 @@ export type StackHeaderOptions = Omit<
    * Title string used by the back button when `headerBackTitle` doesn't fit on the screen. `"Back"` by default.
    */
   headerTruncatedBackTitle?: string;
+  isHeaderAbsolutelyPositioned?: boolean;
   /**
    * Function which returns a React Element to display custom image in header's back button.
    * It receives the `tintColor` in in the options object as an argument. object.
diff --git a/node_modules/@react-navigation/stack/src/views/Stack/CardStack.tsx b/node_modules/@react-navigation/stack/src/views/Stack/CardStack.tsx
index 4d4848f..c19026a 100755
--- a/node_modules/@react-navigation/stack/src/views/Stack/CardStack.tsx
+++ b/node_modules/@react-navigation/stack/src/views/Stack/CardStack.tsx
@@ -18,6 +18,8 @@ import {
 } from 'react-native';
 import type { EdgeInsets } from 'react-native-safe-area-context';
 
+import { getIsModalPresentation } from './Card';
+import CardContainer from './CardContainer';
 import {
   forModalPresentationIOS,
   forNoAnimation as forNoAnimationCard,
@@ -39,8 +41,6 @@ import findLastIndex from '../../utils/findLastIndex';
 import getDistanceForDirection from '../../utils/getDistanceForDirection';
 import type { Props as HeaderContainerProps } from '../Header/HeaderContainer';
 import { MaybeScreen, MaybeScreenContainer } from '../Screens';
-import { getIsModalPresentation } from './Card';
-import CardContainer from './CardContainer';
 
 type GestureValues = {
   [key: string]: Animated.Value;
@@ -266,7 +266,7 @@ export default class CardStack extends React.Component<Props, State> {
           ? nextDescriptor.options
           : descriptor.options;
 
-      let defaultTransitionPreset =
+      const defaultTransitionPreset =
         optionsForTransitionConfig.presentation === 'modal'
           ? ModalTransition
           : optionsForTransitionConfig.presentation === 'transparentModal'
@@ -470,6 +470,11 @@ export default class CardStack extends React.Component<Props, State> {
     return undefined;
   };
 
+  private lastActivityStateForIndex: Record<
+    number,
+    number | Animated.AnimatedInterpolation<number>
+  > = {};
+
   render() {
     const {
       insets,
@@ -499,12 +504,18 @@ export default class CardStack extends React.Component<Props, State> {
 
     const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {
       const options = scene.descriptor.options ?? {};
-      const { headerMode, headerTransparent, headerShown = true } = options;
+      const {
+        headerMode,
+        headerTransparent,
+        headerShown = true,
+        isHeaderAbsolutelyPositioned,
+      } = options;
 
       if (
         headerTransparent ||
         headerShown === false ||
-        headerMode === 'screen'
+        headerMode === 'screen' ||
+        isHeaderAbsolutelyPositioned
       ) {
         return true;
       }
@@ -585,15 +596,23 @@ export default class CardStack extends React.Component<Props, State> {
             // For the old implementation, it stays the same it was
             let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;
 
-            if (index < self.length - activeScreensLimit - 1) {
+            const activeAfterTransition =
+              index >= self.length - activeScreensLimit;
+
+            if (
+              index < self.length - activeScreensLimit - 1 ||
+              (this.lastActivityStateForIndex[index] === STATE_INACTIVE &&
+                !activeAfterTransition)
+            ) {
               // screen should be inactive because it is too deep in the stack
+              // or it was inactive before and it will still be inactive after the transition.
               isScreenActive = STATE_INACTIVE;
             } else {
               const sceneForActivity = scenes[self.length - 1];
               const outputValue =
                 index === self.length - 1
                   ? STATE_ON_TOP // the screen is on top after the transition
-                  : index >= self.length - activeScreensLimit
+                  : activeAfterTransition
                   ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit
                   : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit
               isScreenActive = sceneForActivity
@@ -605,6 +624,8 @@ export default class CardStack extends React.Component<Props, State> {
                 : STATE_TRANSITIONING_OR_BELOW_TOP;
             }
 
+            this.lastActivityStateForIndex[index] = isScreenActive;
+
             const {
               headerShown = true,
               headerTransparent,
